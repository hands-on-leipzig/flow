name: Deploy to Test Environment

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'

jobs:
  deploy-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql
        coverage: none
        
    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.2
      with:
        mysql version: '8.0'
        mysql root password: 'root'
        mysql database: 'test_db'
        
    - name: Install dependencies
      run: |
        cd backend
        composer install --no-dev --optimize-autoloader
        
    - name: Configure environment
      run: |
        cd backend
        cp .env.example .env
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USERNAME=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        
    - name: Generate application key
      run: |
        cd backend
        php artisan key:generate
        
    - name: Deploy to test environment
      env:
        BACKEND_DIR: ${{ github.workspace }}/backend
        DB_HOST: 127.0.0.1
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DEV_DB_NAME: ${{ secrets.DEV_DB_NAME }}
        DEV_DB_USER: ${{ secrets.DEV_DB_USER }}
        DEV_DB_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
      run: |
        chmod +x backend/deploy_test.sh
        ./backend/deploy_test.sh
        
    - name: Run tests
      run: |
        cd backend
        php artisan test
        
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        
    - name: Deploy to test server
      if: success()
      run: |
        echo "Deployment to test server would happen here"
        echo "This could include:"
        echo "- Uploading files via SSH/SCP"
        echo "- Running deployment commands on the server"
        echo "- Restarting services"
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Test deployment successful!"
        else
          echo "❌ Test deployment failed!"
        fi
